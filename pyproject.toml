[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "wwpdb.utils.markdown-wrapper"
dynamic = ["version"]
description = "wwPDB markdown rendering"
readme = "README.md"
license = "Apache-2.0"
authors = [
    { name = "Ezra Peisach", email = "ezra.peisach@rcsb.org" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
]

requires-python = ">=3.8"

dependencies = [
    "beautifulsoup4",
    "graphviz",
    "Markdown~=3.0",
    "pygments",
]

[project.optional-dependencies]
dev = [
    "check-manifest",
]

test = [
     "mock"
]

[project.urls]
Homepage = "https://github.com/wwpdb/py-wwpdb_utils_markdown_wrapper"

[tool.hatch.version]
path = "wwpdb/utils/markdown_wrapper/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/wwpdb",
]

[tool.hatch.build.targets.wheel]
#only-include = ["wwpdb"]
packages = ["wwpdb"]


#
#=================================== Ruff basics =============================#

line-length = 120 # 120 is hatch's default via 'hatch init'
include = [
  "*.py",           # Source
  "pyproject.toml", # This file (RUF rules only)
  "*.ipynb",        # Jupyter notebooks
]

#
#=================================== Ruff lint ==============================#

[tool.ruff.lint]

#
# ------------------------- Ruff misc. options ----------------------
preview = true
explicit-preview-rules = true

ignore = [
  "FBT002",   # Boolean default positional argument in function definition
  "FURB113",  #  Use `stPL.extend(...)` instead of repeatedly calling `stPL.append()`
  "N801",     # Class name `markdownTests` should use CapWords convention
  "N802",     # Function name should be lowercase
  "N803",     # Argument name should be lowercase
  "N806",     # in function should be lowercase
  "N816",     # Variable in global scope should not be mixedCase
  "N999",     # Invalid module name,
  "PERF401",  # Use a list comprehension to create a transformed list
  "PLW1514",  # `open` in text mode without explicit `encoding` argument
  "PT009",    # Use a regular `assert` instead of unittest-style `assertGreater`
  "RET504",   # Unnecessary assignment to `X` before `return` statement
  "TRY401",   # Redundant exception object included in `logging.exception` call
  "UP031"    # Use format specifiers instead of percent format
#  "UP008",    # Use `super()` instead of `super(__class__, self)`
]

# -------------------- default environment scripts ------------------
[tool.hatch.envs.default]
skip-install = true
dependencies = ["mypy", "ruff >=0.6.9"]


[tool.hatch.envs.default.scripts]

# 'format' formats and fixes issues but does not complain
format = [
  "ruff format",
  "ruff check --fix-only",
]

# 'format-python' just excludes Prettier
format-python = ["ruff format", "ruff check --fix-only"]

# 'check' only checks but never fixes
check = ["ruff check --no-fix .", "mypy --non-interactive --install-types wwpdb tests"]

# only checks with ruff (mypy has a lot of false positives)
check-ruff = "ruff check --no-fix . {args}"

# to complement 'check-ruff'
check-mypy = "mypy --non-interactive --install-types wwpdb tests {args}"

# only check security via Bandit; we require these rules to pass
check-security = "ruff check --select S --no-fix ."

