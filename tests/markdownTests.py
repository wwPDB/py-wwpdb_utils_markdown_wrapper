##
#
# File:    markdownTests.py
# Author:  J. Westbrook
# Date:    15-Nov-2016
# Version: 0.001
#
# Updates:
#    1-Dec-2016 jdw sync with latest file conventions and add installation details
#
##
"""
Installation - for project api documentation following recommendations from ReadTheDocs -

   #  For markdown with code higlighting
   pip install Pygments
   pip install markdown==2.6.6
   # for Sphinx and api docs with extra support for Google style comments
   pip install sphinx
   pip install sphinx-autobuild
   pip install recommonmark==0.4.0
   pip install CommonMark==0.5.5
   #
   pip install sphinx_bootstrap_theme
   pip install sphinxcontrib-napoleon==0.5.0

   # Needed for handling inline mermaid and graphviz dot format
   pip install beautifulsoup4
   pip install graphviz

"""

__docformat__ = "restructuredtext en"
__author__ = "John Westbrook"
__email__ = "jwest@rcsb.rutgers.edu"
__license__ = "Creative Commons Attribution 3.0 Unported"
__version__ = "V0.01"

import filecmp
import os
import os.path
import platform
import sys
import unittest

try:
    from unittest import mock
except ImportError:
    from unittest import mock
import logging

from wwpdb.utils.markdown_wrapper.render_markdown import addMermaid, getSettings, markdown2html, renderDotgraph

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

# orig_backend_run = graphviz.backend.run
orig_dg = renderDotgraph
run_under_mock = os.environ.get("MOCKEXE")


def bypass_render(dotText):
    # logger.error("XXX BYPASS")
    if run_under_mock:
        return b'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"\n "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<!-- Generated by graphviz version 12.2.1 (20241206.2353)\n -->\n<!-- Title: pet&#45;shop Pages: 1 -->\n<svg width="152pt" height="44pt"\n viewBox="0.00 0.00 152.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">\n<title>pet&#45;shop</title>\n<polygon fill="white" stroke="none" points="-4,4 -4,-40 148,-40 148,4 -4,4"/>\n<!-- parrot -->\n<g id="node1" class="node">\n<title>parrot</title>\n<text text-anchor="middle" x="27" y="-12.95" font-family="Times,serif" font-size="14.00">parrot</text>\n</g>\n<!-- dead -->\n<g id="node2" class="node">\n<title>dead</title>\n<text text-anchor="middle" x="117" y="-12.95" font-family="Times,serif" font-size="14.00">dead</text>\n</g>\n<!-- parrot&#45;&gt;dead -->\n<g id="edge1" class="edge">\n<title>parrot&#45;&gt;dead</title>\n<path fill="none" stroke="black" d="M53.93,-18C58.76,-18 63.95,-18 69.19,-18"/>\n<polygon fill="black" stroke="black" points="89.04,-18 69.04,-27 80.26,-18 69.04,-18 69.04,-18 69.04,-18 80.26,-18 69.04,-9 89.04,-18"/>\n</g>\n</g>\n</svg>\n'  # noqa: E501
    return orig_dg(dotText)


class markdownTests(unittest.TestCase):
    def setUp(self):
        here = os.path.abspath(os.path.dirname(__file__))
        testoutput = os.path.join(here, "test-output", platform.python_version())
        if not os.path.exists(testoutput):  # pragma: no cover
            os.makedirs(testoutput)

        self.__testFileMermaid = os.path.join(here, "test-mermaid.md")
        self.__settingsFile = os.path.join(here, "markdown_render.ini")
        self.__outputFile = os.path.join(testoutput, "export.html")
        if run_under_mock:
            self.__refFile = os.path.join(here, "export.ref")
        else:
            self.__refFile = os.path.join(here, "exportmock.ref")

    def tearDown(self):
        pass

    #    @mock.patch("Agraphviz.backend.run", side_effect=simple_graphviz_render)
    @mock.patch("wwpdb.utils.markdown_wrapper.render_markdown.renderDotgraph", side_effect=bypass_render)
    def testRenderMermaid(self, mfunc):  # noqa: ARG002 pylint: disable=unused-argument
        """Test case -  render markdown with mermaid figure"""
        logger.info("Starting")
        try:
            settings = getSettings(self.__settingsFile)
            with open(self.__testFileMermaid) as fin:
                md_data_in = fin.read()
                #            if sys.version_info[0] == 2:
                #                md_data = unicode(md_data_in, "utf-8")  # pylint: disable=undefined-variable
                #            else:
                md_data = md_data_in
            html = markdown2html(md_data, settings, markdownPath="inline-text")
            html = addMermaid(html)
            with open(self.__outputFile, "w") as ofh:
                if sys.version_info[0] >= 3:
                    ofh.write(html)
                else:
                    ofh.write(html.encode("utf-8"))
        except Exception as e:
            logger.exception("Exception %s", e)
            self.fail()

        self.assertTrue(filecmp.cmp(self.__refFile, self.__outputFile, "Failed to compare file output"))


# noinspection PyPep8Naming
def suiteMermaid():
    suiteSelect = unittest.TestSuite()
    suiteSelect.addTest(markdownTests("testRenderMermaid"))
    return suiteSelect


if __name__ == "__main__":
    mySuite = suiteMermaid()
    unittest.TextTestRunner(verbosity=2).run(mySuite)
